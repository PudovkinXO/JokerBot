import telebot
import requests
import os
from dotenv import load_dotenv
from telebot import types

load_dotenv()

BOT_API_TOKEN = os.getenv("BOT_API_TOKEN") # bot token from BotFather
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") # key from ProxyApi
PROXY_URL = "https://api.proxyapi.ru/openai/v1/chat/completions" 

bot = telebot.TeleBot(BOT_API_TOKEN)

def joke_from_chatgpt(prompt): # ChatGPT integration
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "gpt-4",
        "messages": [
            {"role": "system", "content": "–¢—ã –±–æ—Ç-—à—É—Ç–Ω–∏–∫ —É—Ä–æ–≤–Ω—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö StandUp'–æ–≤. –¢—ã –º–æ–∂–µ—à—å –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —à—É—Ç–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –∏ –Ω–∏—á–µ–≥–æ –±–æ–ª—å—à–µ. –ò—Å–ø–æ–ª—å–∑—É–π —á—ë—Ä–Ω—ã–π —é–º–æ—Ä, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥–∏–±–∞–π –ø–∞–ª–∫—É."},
            {"role": "user", "content": f"–°–¥–µ–ª–∞–π —à—É—Ç–∫—É –Ω–∞ —Ç–µ–º—É: {prompt}"}
        ],
        "max_tokens": 150,
        "temperature": 0.5
    }
    
    response = requests.post(PROXY_URL, headers=headers, json=payload) 
    
    try:
        response_data = response.json()
        if "choices" in response_data:
            return response_data["choices"][0]["message"]["content"].strip()
        elif "error" in response_data:
            return f"–û—à–∏–±–∫–∞: {response_data['error']['message']}"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT.", 
    except requests.exceptions.JSONDecodeError:
        return "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

@bot.message_handler(commands = ['start'])
def start_message(message): # sending a welcome message
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    btn1 = types.KeyboardButton('‚ñ∂Ô∏è –®—É—Ç–∏—Ç—å')
    btn2 = types.KeyboardButton('‚öôÔ∏è –û–±–æ –º–Ω–µ')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç, —è ‚Äî JokerBot! üòé\n–•–æ—á–µ—à—å —Å–Ω–∞—á–∞–ª–∞ —É–∑–Ω–∞—Ç—å, –∫—Ç–æ —è —Ç–∞–∫–æ–π? –ò–ª–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Ä—Ü–∏–∏ —é–º–æ—Ä–∞?\n–í—ã–±–∏—Ä–∞–π –º—É–¥—Ä–æ, –Ω–æ –∑–Ω–∞–π: –º–æ–∏ —à—É—Ç–∫–∏ —É–∂–µ –∑–∞—Ä—è–∂–µ–Ω—ã! üé§üòÇ", reply_markup=markup)

@bot.message_handler(content_types=['text'])
def get_message(message): # commands processing
    
    if message.text == '‚öôÔ∏è –û–±–æ –º–Ω–µ':
        bot.send_message(message.from_user.id, '–Ø ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –±–æ—Ç-–∫–æ–º–∏–∫, —Ç–æ–ª—å–∫–æ –±–µ–∑ –≥–æ–Ω–æ—Ä–∞—Ä–æ–≤! üòÇ\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∂–º—ë—à—å "–®—É—Ç–∏—Ç—å", —Ç–µ–±–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –¥–∞—Ç—å –º–Ω–µ —Ç–µ–º—É, –∞ –¥–∞–ª—å—à–µ ‚Äî –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º–æ–∏–º –∏—Å–∫—É—Å—Å—Ç–≤–æ–º –≤—ã–¥–∞–≤–∞—Ç—å –æ—Å—Ç—Ä–æ—Ç—ã!\n–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –≤–æ–∑–º–æ–∂–Ω—ã —à—É—Ç–∫–∏ —É—Ä–æ–≤–Ω—è "–ø–∞–ø–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ"! üòÜ', parse_mode='Markdown')
            
    elif message.text == '‚ñ∂Ô∏è –®—É—Ç–∏—Ç—å':
        msg = bot.send_message(message.from_user.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–º—É —à—É—Ç–∫–∏! üòÜ")
        bot.register_next_step_handler(msg, generate_joke)
    
    else: 
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        btn1 = types.KeyboardButton('‚ñ∂Ô∏è –®—É—Ç–∏—Ç—å')
        btn2 = types.KeyboardButton('‚öôÔ∏è –û–±–æ –º–Ω–µ')
        markup.add(btn1, btn2)
        bot.send_message(message.from_user.id, '–û–π, –Ω—É –∫–æ–Ω–µ—á–Ω–æ! –¢–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —ç—Ç–æ –∂–µ –ø—Ä–æ—Å—Ç–æ —à–µ–¥–µ–≤—Ä—ã –º–∏—Ä–æ–≤–æ–≥–æ —á–∞—Ç–∞! ü§©\n–ù–æ –∑–Ω–∞–µ—à—å —á—Ç–æ? –ú–µ–Ω—è –æ–Ω–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ –≤–æ–ª–Ω—É—é—Ç! üôÉ\n–î–∞–≤–∞–π, —Ä–µ—à–∏ –Ω–∞–∫–æ–Ω–µ—Ü, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å, –∏ –Ω–∞–∂–º–∏ –Ω–∞ –≥—Ä–µ–±–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É! üöÄ')
    
def generate_joke(message): # joke generator
    topic = message.text
    bot.send_message(message.chat.id, "–ü—Ä–∏—à—É—á–∏–≤–∞—é —à—É—Ç–æ—á–∫—É... üòè")
    joke = joke_from_chatgpt(topic)
    bot.send_message(message.chat.id, joke)
    
if __name__ == "__main__":
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.polling(none_stop=True)